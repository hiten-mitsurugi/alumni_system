# Generated by Django 4.2.16 on 2025-07-14 06:25

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "user_type",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Super Admin"), (2, "Admin"), (3, "Alumni")],
                        default=3,
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("prefer_not_to_say", "Prefer not to say"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "civil_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("single", "Single"),
                            ("married", "Married"),
                            ("separated", "Separated"),
                            ("widowed", "Widowed"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "employment_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("employed_locally", "Employed Locally"),
                            ("employed_internationally", "Employed Internationally"),
                            ("self_employed", "Self-Employed"),
                            ("unemployed", "Unemployed"),
                            ("retired", "Retired"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("is_approved", models.BooleanField(default=False)),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="profile_pictures/"
                    ),
                ),
                (
                    "middle_name",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "school_id",
                    models.CharField(blank=True, max_length=50, null=True, unique=True),
                ),
                (
                    "government_id",
                    models.FileField(
                        blank=True, null=True, upload_to="government_ids/"
                    ),
                ),
                ("program", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "contact_number",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("birth_date", models.DateField(blank=True, null=True)),
                ("year_graduated", models.PositiveIntegerField(blank=True, null=True)),
                ("present_address", models.TextField(blank=True, null=True)),
                ("permanent_address", models.TextField(blank=True, null=True)),
                (
                    "mothers_name",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "mothers_occupation",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "fathers_name",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "fathers_occupation",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Skill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="WorkHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("first_job", "First Job"),
                            ("current_job", "Current Job"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "employment_status",
                    models.CharField(
                        choices=[
                            ("employed_locally", "Employed Locally"),
                            ("employed_internationally", "Employed Internationally"),
                            ("self_employed", "Self-Employed"),
                            ("unemployed", "Unemployed"),
                            ("retired", "Retired"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "classification",
                    models.CharField(
                        choices=[
                            ("government", "Government"),
                            ("private", "Private"),
                            ("ngo", "NGO"),
                            ("freelance", "Freelance"),
                            ("business_owner", "Business Owner"),
                        ],
                        max_length=50,
                    ),
                ),
                ("occupation", models.CharField(max_length=255)),
                ("employing_agency", models.CharField(max_length=255)),
                ("how_got_job", models.CharField(max_length=100)),
                (
                    "monthly_income",
                    models.CharField(
                        choices=[
                            ("less_than_15000", "Less than P15,000"),
                            ("15000_to_29999", "P15,000 - P29,999"),
                            ("30000_to_49999", "P30,000 - P49,999"),
                            ("50000_and_above", "P50,000 and above"),
                            ("prefer_not_to_say", "Prefer not to say"),
                        ],
                        max_length=50,
                    ),
                ),
                ("is_breadwinner", models.BooleanField()),
                ("length_of_service", models.CharField(max_length=50)),
                (
                    "college_education_relevant",
                    models.CharField(
                        choices=[
                            ("yes", "Yes"),
                            ("no", "No"),
                            ("somewhat", "Somewhat"),
                        ],
                        max_length=10,
                    ),
                ),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "skills",
                    models.ManyToManyField(
                        blank=True, related_name="work_histories", to="auth_app.skill"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="work_histories",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SkillsRelevance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "critical_thinking",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "communication",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "innovation",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "collaboration",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "leadership",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "productivity_accountability",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "entrepreneurship",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "global_citizenship",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "adaptability",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "accessing_analyzing_synthesizing_info",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="skills_relevance",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("full_name", models.CharField(max_length=450)),
                ("email_address", models.EmailField(max_length=254)),
                ("school_id", models.CharField(max_length=50)),
                ("mobile_number", models.CharField(max_length=20)),
                (
                    "sex",
                    models.CharField(
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("prefer_not_to_say", "Prefer not to say"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "civil_status",
                    models.CharField(
                        choices=[
                            ("single", "Single"),
                            ("married", "Married"),
                            ("separated", "Separated"),
                            ("widowed", "Widowed"),
                        ],
                        max_length=20,
                    ),
                ),
                ("year_of_birth", models.DateField()),
                ("present_address", models.TextField()),
                ("permanent_address", models.TextField()),
                ("mothers_name", models.CharField(max_length=150)),
                ("mothers_occupation", models.CharField(max_length=100)),
                ("fathers_name", models.CharField(max_length=150)),
                ("fathers_occupation", models.CharField(max_length=100)),
                ("year_graduated", models.PositiveIntegerField()),
                ("program", models.CharField(max_length=100)),
                (
                    "present_employment_status",
                    models.CharField(
                        choices=[
                            ("employed_locally", "Employed Locally"),
                            ("employed_internationally", "Employed Internationally"),
                            ("self_employed", "Self-Employed"),
                            ("unemployed", "Unemployed"),
                            ("retired", "Retired"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "employment_classification",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("government", "Government"),
                            ("private", "Private"),
                            ("ngo", "NGO"),
                            ("freelance", "Freelance"),
                            ("business_owner", "Business Owner"),
                        ],
                        max_length=50,
                    ),
                ),
                ("present_occupation", models.CharField(blank=True, max_length=255)),
                ("employing_agency", models.CharField(blank=True, max_length=255)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PerceptionFurtherStudies",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "competitiveness",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("pursued_further_studies", models.BooleanField()),
                (
                    "mode_of_study",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("full_time", "Full-time"),
                            ("part_time", "Part-time"),
                            ("online", "Online"),
                            ("others", "Others"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "level_of_study",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("masters", "Master's"),
                            ("doctoral", "Doctoral"),
                            ("certificate", "Certificate"),
                        ],
                        max_length=50,
                    ),
                ),
                ("field_of_study", models.CharField(blank=True, max_length=100)),
                ("specialization", models.CharField(blank=True, max_length=100)),
                ("related_to_undergrad", models.BooleanField(null=True)),
                ("reasons_for_further_study", models.TextField(blank=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="perception_studies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FeedbackRecommendations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("recommendations", models.TextField(blank=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CurriculumRelevance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "general_education",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "core_major",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "special_professional",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "electives",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "internship_ojt",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "co_curricular_activities",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "extra_curricular_activities",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="curriculum_relevance",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AlumniDirectory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=150)),
                (
                    "middle_name",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                ("last_name", models.CharField(max_length=150)),
                ("birth_date", models.DateField()),
                ("school_id", models.CharField(max_length=50, unique=True)),
                ("program", models.CharField(max_length=100)),
                ("year_graduated", models.PositiveIntegerField()),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("prefer_not_to_say", "Prefer not to say"),
                        ],
                        max_length=20,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["school_id"], name="auth_app_al_school__bbac3d_idx"
                    ),
                    models.Index(
                        fields=["first_name", "last_name"],
                        name="auth_app_al_first_n_f6a0bf_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(
                fields=["user_type", "is_approved"],
                name="auth_app_cu_user_ty_b19aa6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(
                fields=["school_id"], name="auth_app_cu_school__efcc62_idx"
            ),
        ),
    ]
