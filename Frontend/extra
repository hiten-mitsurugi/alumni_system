<script setup>
import { ref, onMounted, computed } from 'vue';
import api from '@/services/api';
import CreateUserModal from '@/components/CreateUserModal.vue';
import { EyeIcon, TrashIcon, BanIcon, UnlockIcon } from 'lucide-vue-next';

const approvedUsers = ref([]);
const selectedUser = ref(null);
const showModal = ref(false);
const showCreateModal = ref(false);

const currentPage = ref(1);
const usersPerPage = 7;

const totalPages = computed(() =>
  Math.ceil(approvedUsers.value.length / usersPerPage)
);

const paginatedUsers = computed(() => {
  const start = (currentPage.value - 1) * usersPerPage;
  return approvedUsers.value.slice(start, start + usersPerPage);
});

const fetchApprovedUsers = async () => {
  try {
    const res = await api.get('/approved-users/');
    approvedUsers.value = Array.isArray(res.data) ? res.data : [];
    currentPage.value = 1;
  } catch (error) {
    console.error('Failed to fetch approved users:', error);
    approvedUsers.value = [];
  }
};

const openModal = (user) => {
  selectedUser.value = user;
  showModal.value = true;
};

const closeModal = () => {
  showModal.value = false;
  selectedUser.value = null;
};

const openCreateModal = () => {
  showCreateModal.value = true;
};

const closeCreateModal = () => {
  showCreateModal.value = false;
};

const deleteUser = async () => {
  if (!selectedUser.value) return;
  await api.delete(`/delete-user/${selectedUser.value.id}/`);
  approvedUsers.value = approvedUsers.value.filter(u => u.id !== selectedUser.value.id);
  closeModal();
};

const blockUser = async (user) => {
  await api.post(`/block-user/${user.id}/`);
  fetchApprovedUsers();
};

const unblockUser = async (user) => {
  await api.post(`/unblock-user/${user.id}/`);
  fetchApprovedUsers();
};

onMounted(fetchApprovedUsers);

function userType(type) {
  return type === 1 ? 'Super Admin' : type === 2 ? 'Admin' : 'Alumni';
}
</script>

<template>
  <div class="p-6 bg-gray-100 min-h-screen">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Approved Users</h1>
      <button @click="openCreateModal" class="bg-green-700 hover:bg-green-800 text-white px-4 py-2 rounded">
        + Create User
      </button>
    </div>

    <div class="overflow-x-auto">
      <table v-if="approvedUsers.length" class="min-w-full bg-white rounded-xl shadow">
        <thead class="bg-green-700 text-white text-left text-sm uppercase">
          <tr>
            <th class="p-4">Profile</th>
            <th class="p-4">First Name</th>
            <th class="p-4">Last Name</th>
            <th class="p-4">School ID</th>
            <th class="p-4">User Type</th>
            <th class="p-4">Email</th>
            <th class="p-4">Contact Number</th>
            <th class="p-4">Program</th>
            <th class="p-4">Year Graduated</th>
            <th class="p-4">Employment</th>
            <th class="p-4">Account</th>
            <th class="p-4">Online</th>
            <th class="p-4">Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="user in paginatedUsers" :key="user.id" class="border-t hover:bg-gray-50">
            <td class="p-4">
              <img :src="user.profile_picture" class="w-10 h-10 rounded-full object-cover border" />
            </td>
            <td class="p-4">{{ user.first_name }}</td>
            <td class="p-4">{{ user.last_name }}</td>
            <td class="p-4">{{ user.school_id }}</td>
            <td class="p-4">{{ userType(user.user_type) }}</td>
            <td class="p-4">{{ user.email }}</td>
            <td class="p-4">{{ user.contact_number || 'N/A' }}</td>
            <td class="p-4">{{ user.program }}</td>
            <td class="p-4">{{ user.year_graduated }}</td>
            <td class="p-4">{{ user.employment_status || 'N/A' }}</td>
            <td class="p-4">
              <span :class="user.is_active ? 'text-green-600 font-semibold' : 'text-red-500 font-semibold'">
                {{ user.is_active ? 'Active' : 'Blocked' }}
              </span>
            </td>
            <td class="p-4">
              <span :class="user.is_online ? 'text-green-500' : 'text-gray-400'">
                {{ user.is_online ? 'Online' : 'Offline' }}
              </span>
            </td>
            <td class="p-4 flex items-center gap-2">
              <button @click="openModal(user)" title="View">
                <EyeIcon class="w-5 h-5 text-blue-600 hover:text-blue-800" />
              </button>
              <button v-if="user.is_active" @click="blockUser(user)" title="Block">
                <BanIcon class="w-5 h-5 text-yellow-600 hover:text-yellow-800" />
              </button>
              <button v-else @click="unblockUser(user)" title="Unblock">
                <UnlockIcon class="w-5 h-5 text-green-600 hover:text-green-800" />
              </button>
              <button @click="() => { selectedUser.value = user; deleteUser(); }" title="Delete">
                <TrashIcon class="w-5 h-5 text-red-600 hover:text-red-800" />
              </button>
            </td>
          </tr>
        </tbody>
      </table>

      <p v-else class="text-center py-10 text-gray-400">No approved users found or still loading...</p>
    </div>

    <!-- Pagination -->
    <div class="mt-6 flex justify-center space-x-2">
      <button
        @click="currentPage.value--"
        :disabled="currentPage.value === 1"
        class="px-3 py-1 bg-gray-300 hover:bg-gray-400 text-sm rounded disabled:opacity-50"
      >
        Previous
      </button>

      <button
        v-for="page in totalPages"
        :key="page"
        @click="currentPage.value = page"
        :class="[ 
          'px-3 py-1 rounded text-sm',
          page === currentPage.value ? 'bg-green-700 text-white' : 'bg-gray-200 hover:bg-gray-300'
        ]"
      >
        {{ page }}
      </button>

      <button
        @click="currentPage.value++"
        :disabled="currentPage.value === totalPages"
        class="px-3 py-1 bg-gray-300 hover:bg-gray-400 text-sm rounded disabled:opacity-50"
      >
        Next
      </button>
    </div>

  

    <!-- User Detail Modal -->
    <div v-if="showModal" class="fixed inset-0 flex items-center justify-center z-50">
      <div class="bg-white p-6 rounded-xl w-full max-w-3xl relative shadow-xl overflow-y-auto max-h-[90vh]">
        <button class="absolute top-2 right-2 text-gray-500 hover:text-gray-700 text-2xl" @click="closeModal">&times;</button>

        <div class="flex items-center space-x-4 mb-6">
          <img :src="selectedUser.profile_picture" class="w-20 h-20 rounded-full object-cover border" />
          <div>
            <h2 class="text-xl font-semibold">{{ selectedUser.first_name }} {{ selectedUser.last_name }}</h2>
            <p class="text-sm text-gray-500">{{ selectedUser.email }}</p>
            <p class="text-sm text-gray-400">Type: {{ userType(selectedUser.user_type) }}</p>
          </div>
        </div>

        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
          <div><strong>First Name:</strong> {{ selectedUser.first_name }}</div>
          <div><strong>Middle Name:</strong> {{ selectedUser.middle_name }}</div>
          <div><strong>Last Name:</strong> {{ selectedUser.last_name }}</div>
          <div><strong>Email:</strong> {{ selectedUser.email }}</div>
          <div><strong>School ID:</strong> {{ selectedUser.school_id }}</div>
          <div><strong>Program:</strong> {{ selectedUser.program }}</div>
          <div><strong>Year Graduated:</strong> {{ selectedUser.year_graduated }}</div>
          <div><strong>Employment Status:</strong> {{ selectedUser.employment_status }}</div>
          <div><strong>Contact Number:</strong> {{ selectedUser.contact_number }}</div>
          <div><strong>Civil Status:</strong> {{ selectedUser.civil_status }}</div>
          <div><strong>Birth Date:</strong> {{ selectedUser.birth_date }}</div>
          <div><strong>Address:</strong> {{ selectedUser.address }}</div>
          <div><strong>Account Status:</strong>
            <span :class="selectedUser.is_active ? 'text-green-600' : 'text-red-500'">
              {{ selectedUser.is_active ? 'Active' : 'Blocked' }}
            </span>
          </div>
        </div>
      </div>
    </div>

    <!-- Create User Modal -->
    <CreateUserModal v-if="showCreateModal" @close="closeCreateModal" />
  </div>
</template>
